// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distsys.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_distsys_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_distsys_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_distsys_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_distsys_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_distsys_2eproto;
namespace distsys {
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace distsys
PROTOBUF_NAMESPACE_OPEN
template<> ::distsys::Request* Arena::CreateMaybeMessage<::distsys::Request>(Arena*);
template<> ::distsys::Response* Arena::CreateMaybeMessage<::distsys::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace distsys {

// ===================================================================

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distsys.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return new Request();
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distsys.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringargFieldNumber = 3,
    kLongargFieldNumber = 2,
    kIntargFieldNumber = 1,
  };
  // string stringarg = 3;
  void clear_stringarg();
  const std::string& stringarg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stringarg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stringarg();
  PROTOBUF_MUST_USE_RESULT std::string* release_stringarg();
  void set_allocated_stringarg(std::string* stringarg);
  private:
  const std::string& _internal_stringarg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stringarg(const std::string& value);
  std::string* _internal_mutable_stringarg();
  public:

  // int64 longarg = 2;
  void clear_longarg();
  ::PROTOBUF_NAMESPACE_ID::int64 longarg() const;
  void set_longarg(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_longarg() const;
  void _internal_set_longarg(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 intarg = 1;
  void clear_intarg();
  ::PROTOBUF_NAMESPACE_ID::int32 intarg() const;
  void set_intarg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intarg() const;
  void _internal_set_intarg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:distsys.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringarg_;
  ::PROTOBUF_NAMESPACE_ID::int64 longarg_;
  ::PROTOBUF_NAMESPACE_ID::int32 intarg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distsys_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:distsys.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return new Response();
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distsys.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseMessageFieldNumber = 2,
    kResponseCodeFieldNumber = 1,
  };
  // string response_message = 2;
  void clear_response_message();
  const std::string& response_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_response_message();
  void set_allocated_response_message(std::string* response_message);
  private:
  const std::string& _internal_response_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response_message(const std::string& value);
  std::string* _internal_mutable_response_message();
  public:

  // int32 response_code = 1;
  void clear_response_code();
  ::PROTOBUF_NAMESPACE_ID::int32 response_code() const;
  void set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_response_code() const;
  void _internal_set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:distsys.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_message_;
  ::PROTOBUF_NAMESPACE_ID::int32 response_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distsys_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// int32 intarg = 1;
inline void Request::clear_intarg() {
  intarg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::_internal_intarg() const {
  return intarg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::intarg() const {
  // @@protoc_insertion_point(field_get:distsys.Request.intarg)
  return _internal_intarg();
}
inline void Request::_internal_set_intarg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  intarg_ = value;
}
inline void Request::set_intarg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_intarg(value);
  // @@protoc_insertion_point(field_set:distsys.Request.intarg)
}

// int64 longarg = 2;
inline void Request::clear_longarg() {
  longarg_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Request::_internal_longarg() const {
  return longarg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Request::longarg() const {
  // @@protoc_insertion_point(field_get:distsys.Request.longarg)
  return _internal_longarg();
}
inline void Request::_internal_set_longarg(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  longarg_ = value;
}
inline void Request::set_longarg(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_longarg(value);
  // @@protoc_insertion_point(field_set:distsys.Request.longarg)
}

// string stringarg = 3;
inline void Request::clear_stringarg() {
  stringarg_.ClearToEmpty();
}
inline const std::string& Request::stringarg() const {
  // @@protoc_insertion_point(field_get:distsys.Request.stringarg)
  return _internal_stringarg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_stringarg(ArgT0&& arg0, ArgT... args) {
 
 stringarg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:distsys.Request.stringarg)
}
inline std::string* Request::mutable_stringarg() {
  std::string* _s = _internal_mutable_stringarg();
  // @@protoc_insertion_point(field_mutable:distsys.Request.stringarg)
  return _s;
}
inline const std::string& Request::_internal_stringarg() const {
  return stringarg_.Get();
}
inline void Request::_internal_set_stringarg(const std::string& value) {
  
  stringarg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_stringarg() {
  
  return stringarg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Request::release_stringarg() {
  // @@protoc_insertion_point(field_release:distsys.Request.stringarg)
  return stringarg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Request::set_allocated_stringarg(std::string* stringarg) {
  if (stringarg != nullptr) {
    
  } else {
    
  }
  stringarg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stringarg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:distsys.Request.stringarg)
}

// -------------------------------------------------------------------

// Response

// int32 response_code = 1;
inline void Response::clear_response_code() {
  response_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_response_code() const {
  return response_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::response_code() const {
  // @@protoc_insertion_point(field_get:distsys.Response.response_code)
  return _internal_response_code();
}
inline void Response::_internal_set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  response_code_ = value;
}
inline void Response::set_response_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_response_code(value);
  // @@protoc_insertion_point(field_set:distsys.Response.response_code)
}

// string response_message = 2;
inline void Response::clear_response_message() {
  response_message_.ClearToEmpty();
}
inline const std::string& Response::response_message() const {
  // @@protoc_insertion_point(field_get:distsys.Response.response_message)
  return _internal_response_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_response_message(ArgT0&& arg0, ArgT... args) {
 
 response_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:distsys.Response.response_message)
}
inline std::string* Response::mutable_response_message() {
  std::string* _s = _internal_mutable_response_message();
  // @@protoc_insertion_point(field_mutable:distsys.Response.response_message)
  return _s;
}
inline const std::string& Response::_internal_response_message() const {
  return response_message_.Get();
}
inline void Response::_internal_set_response_message(const std::string& value) {
  
  response_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_response_message() {
  
  return response_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_response_message() {
  // @@protoc_insertion_point(field_release:distsys.Response.response_message)
  return response_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Response::set_allocated_response_message(std::string* response_message) {
  if (response_message != nullptr) {
    
  } else {
    
  }
  response_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:distsys.Response.response_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace distsys

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_distsys_2eproto
