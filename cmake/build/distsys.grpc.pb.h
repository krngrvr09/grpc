// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: distsys.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_distsys_2eproto__INCLUDED
#define GRPC_distsys_2eproto__INCLUDED

#include "distsys.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace distsys {

// Interface exported by the server.
class Distsys final {
 public:
  static constexpr char const* service_full_name() {
    return "distsys.Distsys";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // A simple RPC.
    //
    // Obtains the feature at a given position.
    //
    // A feature with an empty name is returned if there's no feature at the given
    // position.
    virtual ::grpc::Status GetString(::grpc::ClientContext* context, const ::distsys::Request& request, ::distsys::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::distsys::Response>> AsyncGetString(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::distsys::Response>>(AsyncGetStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::distsys::Response>> PrepareAsyncGetString(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::distsys::Response>>(PrepareAsyncGetStringRaw(context, request, cq));
    }
    // A server-to-client streaming RPC.
    //
    // Obtains the Features available within the given Rectangle.  Results are
    // streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of features.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::distsys::Response>> GetStringStream(::grpc::ClientContext* context, const ::distsys::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::distsys::Response>>(GetStringStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::distsys::Response>> AsyncGetStringStream(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::distsys::Response>>(AsyncGetStringStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::distsys::Response>> PrepareAsyncGetStringStream(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::distsys::Response>>(PrepareAsyncGetStringStreamRaw(context, request, cq));
    }
    // A client-to-server streaming RPC.
    //
    // Accepts a stream of Points on a route being traversed, returning a
    // RouteSummary when traversal is completed.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::distsys::Request>> SendStringStream(::grpc::ClientContext* context, ::distsys::Response* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::distsys::Request>>(SendStringStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::distsys::Request>> AsyncSendStringStream(::grpc::ClientContext* context, ::distsys::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::distsys::Request>>(AsyncSendStringStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::distsys::Request>> PrepareAsyncSendStringStream(::grpc::ClientContext* context, ::distsys::Response* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::distsys::Request>>(PrepareAsyncSendStringStreamRaw(context, response, cq));
    }
    // A Bidirectional streaming RPC.
    //
    // Accepts a stream of RouteNotes sent while a route is being traversed,
    // while receiving other RouteNotes (e.g. from other users).
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::distsys::Request, ::distsys::Response>> ExchangeStringStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::distsys::Request, ::distsys::Response>>(ExchangeStringStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::distsys::Request, ::distsys::Response>> AsyncExchangeStringStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::distsys::Request, ::distsys::Response>>(AsyncExchangeStringStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::distsys::Request, ::distsys::Response>> PrepareAsyncExchangeStringStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::distsys::Request, ::distsys::Response>>(PrepareAsyncExchangeStringStreamRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // A simple RPC.
      //
      // Obtains the feature at a given position.
      //
      // A feature with an empty name is returned if there's no feature at the given
      // position.
      virtual void GetString(::grpc::ClientContext* context, const ::distsys::Request* request, ::distsys::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetString(::grpc::ClientContext* context, const ::distsys::Request* request, ::distsys::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // A server-to-client streaming RPC.
      //
      // Obtains the Features available within the given Rectangle.  Results are
      // streamed rather than returned at once (e.g. in a response message with a
      // repeated field), as the rectangle may cover a large area and contain a
      // huge number of features.
      virtual void GetStringStream(::grpc::ClientContext* context, const ::distsys::Request* request, ::grpc::ClientReadReactor< ::distsys::Response>* reactor) = 0;
      // A client-to-server streaming RPC.
      //
      // Accepts a stream of Points on a route being traversed, returning a
      // RouteSummary when traversal is completed.
      virtual void SendStringStream(::grpc::ClientContext* context, ::distsys::Response* response, ::grpc::ClientWriteReactor< ::distsys::Request>* reactor) = 0;
      // A Bidirectional streaming RPC.
      //
      // Accepts a stream of RouteNotes sent while a route is being traversed,
      // while receiving other RouteNotes (e.g. from other users).
      virtual void ExchangeStringStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::distsys::Request,::distsys::Response>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::distsys::Response>* AsyncGetStringRaw(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::distsys::Response>* PrepareAsyncGetStringRaw(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::distsys::Response>* GetStringStreamRaw(::grpc::ClientContext* context, const ::distsys::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::distsys::Response>* AsyncGetStringStreamRaw(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::distsys::Response>* PrepareAsyncGetStringStreamRaw(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::distsys::Request>* SendStringStreamRaw(::grpc::ClientContext* context, ::distsys::Response* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::distsys::Request>* AsyncSendStringStreamRaw(::grpc::ClientContext* context, ::distsys::Response* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::distsys::Request>* PrepareAsyncSendStringStreamRaw(::grpc::ClientContext* context, ::distsys::Response* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::distsys::Request, ::distsys::Response>* ExchangeStringStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::distsys::Request, ::distsys::Response>* AsyncExchangeStringStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::distsys::Request, ::distsys::Response>* PrepareAsyncExchangeStringStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetString(::grpc::ClientContext* context, const ::distsys::Request& request, ::distsys::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::distsys::Response>> AsyncGetString(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::distsys::Response>>(AsyncGetStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::distsys::Response>> PrepareAsyncGetString(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::distsys::Response>>(PrepareAsyncGetStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::distsys::Response>> GetStringStream(::grpc::ClientContext* context, const ::distsys::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::distsys::Response>>(GetStringStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::distsys::Response>> AsyncGetStringStream(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::distsys::Response>>(AsyncGetStringStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::distsys::Response>> PrepareAsyncGetStringStream(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::distsys::Response>>(PrepareAsyncGetStringStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::distsys::Request>> SendStringStream(::grpc::ClientContext* context, ::distsys::Response* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::distsys::Request>>(SendStringStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::distsys::Request>> AsyncSendStringStream(::grpc::ClientContext* context, ::distsys::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::distsys::Request>>(AsyncSendStringStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::distsys::Request>> PrepareAsyncSendStringStream(::grpc::ClientContext* context, ::distsys::Response* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::distsys::Request>>(PrepareAsyncSendStringStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::distsys::Request, ::distsys::Response>> ExchangeStringStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::distsys::Request, ::distsys::Response>>(ExchangeStringStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::distsys::Request, ::distsys::Response>> AsyncExchangeStringStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::distsys::Request, ::distsys::Response>>(AsyncExchangeStringStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::distsys::Request, ::distsys::Response>> PrepareAsyncExchangeStringStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::distsys::Request, ::distsys::Response>>(PrepareAsyncExchangeStringStreamRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetString(::grpc::ClientContext* context, const ::distsys::Request* request, ::distsys::Response* response, std::function<void(::grpc::Status)>) override;
      void GetString(::grpc::ClientContext* context, const ::distsys::Request* request, ::distsys::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetStringStream(::grpc::ClientContext* context, const ::distsys::Request* request, ::grpc::ClientReadReactor< ::distsys::Response>* reactor) override;
      void SendStringStream(::grpc::ClientContext* context, ::distsys::Response* response, ::grpc::ClientWriteReactor< ::distsys::Request>* reactor) override;
      void ExchangeStringStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::distsys::Request,::distsys::Response>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::distsys::Response>* AsyncGetStringRaw(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::distsys::Response>* PrepareAsyncGetStringRaw(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::distsys::Response>* GetStringStreamRaw(::grpc::ClientContext* context, const ::distsys::Request& request) override;
    ::grpc::ClientAsyncReader< ::distsys::Response>* AsyncGetStringStreamRaw(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::distsys::Response>* PrepareAsyncGetStringStreamRaw(::grpc::ClientContext* context, const ::distsys::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::distsys::Request>* SendStringStreamRaw(::grpc::ClientContext* context, ::distsys::Response* response) override;
    ::grpc::ClientAsyncWriter< ::distsys::Request>* AsyncSendStringStreamRaw(::grpc::ClientContext* context, ::distsys::Response* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::distsys::Request>* PrepareAsyncSendStringStreamRaw(::grpc::ClientContext* context, ::distsys::Response* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::distsys::Request, ::distsys::Response>* ExchangeStringStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::distsys::Request, ::distsys::Response>* AsyncExchangeStringStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::distsys::Request, ::distsys::Response>* PrepareAsyncExchangeStringStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetString_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStringStream_;
    const ::grpc::internal::RpcMethod rpcmethod_SendStringStream_;
    const ::grpc::internal::RpcMethod rpcmethod_ExchangeStringStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // A simple RPC.
    //
    // Obtains the feature at a given position.
    //
    // A feature with an empty name is returned if there's no feature at the given
    // position.
    virtual ::grpc::Status GetString(::grpc::ServerContext* context, const ::distsys::Request* request, ::distsys::Response* response);
    // A server-to-client streaming RPC.
    //
    // Obtains the Features available within the given Rectangle.  Results are
    // streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of features.
    virtual ::grpc::Status GetStringStream(::grpc::ServerContext* context, const ::distsys::Request* request, ::grpc::ServerWriter< ::distsys::Response>* writer);
    // A client-to-server streaming RPC.
    //
    // Accepts a stream of Points on a route being traversed, returning a
    // RouteSummary when traversal is completed.
    virtual ::grpc::Status SendStringStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::distsys::Request>* reader, ::distsys::Response* response);
    // A Bidirectional streaming RPC.
    //
    // Accepts a stream of RouteNotes sent while a route is being traversed,
    // while receiving other RouteNotes (e.g. from other users).
    virtual ::grpc::Status ExchangeStringStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::distsys::Response, ::distsys::Request>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetString() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetString(::grpc::ServerContext* /*context*/, const ::distsys::Request* /*request*/, ::distsys::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetString(::grpc::ServerContext* context, ::distsys::Request* request, ::grpc::ServerAsyncResponseWriter< ::distsys::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStringStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStringStream(::grpc::ServerContext* /*context*/, const ::distsys::Request* /*request*/, ::grpc::ServerWriter< ::distsys::Response>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStringStream(::grpc::ServerContext* context, ::distsys::Request* request, ::grpc::ServerAsyncWriter< ::distsys::Response>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendStringStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStringStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::distsys::Request>* /*reader*/, ::distsys::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendStringStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::distsys::Response, ::distsys::Request>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExchangeStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExchangeStringStream() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ExchangeStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeStringStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::distsys::Response, ::distsys::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeStringStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::distsys::Response, ::distsys::Request>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetString<WithAsyncMethod_GetStringStream<WithAsyncMethod_SendStringStream<WithAsyncMethod_ExchangeStringStream<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetString() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::distsys::Request, ::distsys::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::distsys::Request* request, ::distsys::Response* response) { return this->GetString(context, request, response); }));}
    void SetMessageAllocatorFor_GetString(
        ::grpc::MessageAllocator< ::distsys::Request, ::distsys::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::distsys::Request, ::distsys::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetString(::grpc::ServerContext* /*context*/, const ::distsys::Request* /*request*/, ::distsys::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetString(
      ::grpc::CallbackServerContext* /*context*/, const ::distsys::Request* /*request*/, ::distsys::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStringStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::distsys::Request, ::distsys::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::distsys::Request* request) { return this->GetStringStream(context, request); }));
    }
    ~WithCallbackMethod_GetStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStringStream(::grpc::ServerContext* /*context*/, const ::distsys::Request* /*request*/, ::grpc::ServerWriter< ::distsys::Response>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::distsys::Response>* GetStringStream(
      ::grpc::CallbackServerContext* /*context*/, const ::distsys::Request* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendStringStream() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::distsys::Request, ::distsys::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, ::distsys::Response* response) { return this->SendStringStream(context, response); }));
    }
    ~WithCallbackMethod_SendStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStringStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::distsys::Request>* /*reader*/, ::distsys::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::distsys::Request>* SendStringStream(
      ::grpc::CallbackServerContext* /*context*/, ::distsys::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExchangeStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExchangeStringStream() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::distsys::Request, ::distsys::Response>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ExchangeStringStream(context); }));
    }
    ~WithCallbackMethod_ExchangeStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeStringStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::distsys::Response, ::distsys::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::distsys::Request, ::distsys::Response>* ExchangeStringStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_GetString<WithCallbackMethod_GetStringStream<WithCallbackMethod_SendStringStream<WithCallbackMethod_ExchangeStringStream<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetString() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetString(::grpc::ServerContext* /*context*/, const ::distsys::Request* /*request*/, ::distsys::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStringStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStringStream(::grpc::ServerContext* /*context*/, const ::distsys::Request* /*request*/, ::grpc::ServerWriter< ::distsys::Response>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendStringStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStringStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::distsys::Request>* /*reader*/, ::distsys::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExchangeStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExchangeStringStream() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ExchangeStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeStringStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::distsys::Response, ::distsys::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetString() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetString(::grpc::ServerContext* /*context*/, const ::distsys::Request* /*request*/, ::distsys::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStringStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStringStream(::grpc::ServerContext* /*context*/, const ::distsys::Request* /*request*/, ::grpc::ServerWriter< ::distsys::Response>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStringStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendStringStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStringStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::distsys::Request>* /*reader*/, ::distsys::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendStringStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExchangeStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExchangeStringStream() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ExchangeStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeStringStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::distsys::Response, ::distsys::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeStringStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetString() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetString(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetString(::grpc::ServerContext* /*context*/, const ::distsys::Request* /*request*/, ::distsys::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStringStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetStringStream(context, request); }));
    }
    ~WithRawCallbackMethod_GetStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStringStream(::grpc::ServerContext* /*context*/, const ::distsys::Request* /*request*/, ::grpc::ServerWriter< ::distsys::Response>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetStringStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendStringStream() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->SendStringStream(context, response); }));
    }
    ~WithRawCallbackMethod_SendStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendStringStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::distsys::Request>* /*reader*/, ::distsys::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SendStringStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExchangeStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExchangeStringStream() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ExchangeStringStream(context); }));
    }
    ~WithRawCallbackMethod_ExchangeStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeStringStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::distsys::Response, ::distsys::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ExchangeStringStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetString() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::distsys::Request, ::distsys::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::distsys::Request, ::distsys::Response>* streamer) {
                       return this->StreamedGetString(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetString(::grpc::ServerContext* /*context*/, const ::distsys::Request* /*request*/, ::distsys::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::distsys::Request,::distsys::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetString<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetStringStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetStringStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::distsys::Request, ::distsys::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::distsys::Request, ::distsys::Response>* streamer) {
                       return this->StreamedGetStringStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetStringStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStringStream(::grpc::ServerContext* /*context*/, const ::distsys::Request* /*request*/, ::grpc::ServerWriter< ::distsys::Response>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetStringStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::distsys::Request,::distsys::Response>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetStringStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetString<WithSplitStreamingMethod_GetStringStream<Service > > StreamedService;
};

}  // namespace distsys


#endif  // GRPC_distsys_2eproto__INCLUDED
